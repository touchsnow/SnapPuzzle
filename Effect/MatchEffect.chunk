// Copyright (c) 2017-2019 Xiamen Yaji Software Co., Ltd.
// reference: 'moving frostbite to pbr' & UE4 BRDF.usf

#include <cc-global>

#if CC_USE_IBL
  #include <cc-environment>
  #include <unpack>
  #include <texture-lod>
#endif

#include <common>
#include <gamma>
#include <lighting>

float GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {
  vec3 NxH = cross(N, H);
  float OneMinusNoHSqr = dot(NxH, NxH);
  float a = roughness * roughness;
  float n = NoH * a;
  float p = a / (OneMinusNoHSqr + n * n);
  return p * p;
}

float CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {
  return (roughness*0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);
}

vec3 BRDFApprox (vec3 specular, float roughness, float NoV) {
  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);
  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);
  vec4 r = roughness * c0 + c1;
  float a004 = min( r.x * r.x, exp2( -9.28 * NoV ) ) * r.x + r.y;
  vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;
  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);
  return specular * AB.x + AB.y;
}

vec3 CalcDynamicLighting (vec3 worldPos, vec3 N, vec3 V, vec3 diffuse, vec3 specular, float roughness) {
  vec3 lighting = vec3(0.0);

  vec3 diffuseContrib = diffuse / PI;

  // Sphere Lights
  for (int i = 0; i < MAX_LIGHTS; i++) {
    vec3 PLU = cc_sphereLitPos[i].xyz - worldPos;
    vec3 PL = normalize(PLU);
    vec3 PH = normalize(PL + V);
    float PNL = max(dot(N, PL), 0.001);
    float PNH = max(dot(N, PH), 0.0);

    float distSqr = dot(PLU, PLU);
    float litRadius = cc_sphereLitSizeRange[i].x;
    float litRadiusSqr = litRadius * litRadius;
    float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));
    float attRadiusSqrInv = 1.0 / max(cc_sphereLitSizeRange[i].y, 0.01);
    attRadiusSqrInv *= attRadiusSqrInv;
    float att = GetDistAtt(distSqr, attRadiusSqrInv);
    vec3 lspec = specular * CalcSpecular(roughness, PNH, PH, N);
    lighting += PNL * cc_sphereLitColor[i].rgb * cc_sphereLitColor[i].w * illum * att * (diffuseContrib + lspec);
  }

  // Spot Lights
  for (int i = 0; i < MAX_LIGHTS; i++) {
    vec3 SLU = cc_spotLitPos[i].xyz - worldPos;
    vec3 SL = normalize(SLU);
    vec3 SH = normalize(SL + V);
    float SNL = max(dot(N, SL), 0.001);
    float SNH = max(dot(N, SH), 0.0);

    float distSqr = dot(SLU, SLU);
    float litRadius = cc_spotLitSizeRangeAngle[i].x;
    float litRadiusSqr = litRadius * litRadius;
    float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));
    float attRadiusSqrInv = 1.0 / max(cc_spotLitSizeRangeAngle[i].y, 0.01);
    attRadiusSqrInv *= attRadiusSqrInv;

    float cosInner = max(dot(-cc_spotLitDir[i].xyz, SL), 0.01);
    float cosOuter = cc_spotLitSizeRangeAngle[i].z;
    float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);
    float litAngleOffset = -cosOuter * litAngleScale;
    float att = GetDistAtt(distSqr, attRadiusSqrInv);
    att *= GetAngleAtt(SL, -cc_spotLitDir[i].xyz, litAngleScale, litAngleOffset);

    vec3 lspec = specular * CalcSpecular(roughness, SNH, SH, N);
    lighting += SNL * cc_spotLitColor[i].rgb * cc_spotLitColor[i].w * illum * att * (diffuseContrib + lspec);
  }

  return lighting;
}

struct StandardSurface {
  // albedo
  vec4 albedo;
  // these two need to be in the same coordinate system
  vec3 position;
  vec3 normal;
  // emissive
  vec3 emissive;
  // PBR params
  float roughness;
  float metallic;
  float occlusion;
};

vec4 CCStandardShadingSelf (StandardSurface s) {
  // Calculate diffuse & specular
  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);
  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);

  vec3 N = normalize(s.normal);
  vec3 V = normalize(cc_cameraPos.xyz - s.position);
  vec3 L = normalize(-cc_mainLitDir.xyz);
  vec3 H = normalize(L+V);
  float NV = max(abs(dot(N, V)), 0.001);
  float NL = max(dot(N, L), 0.001);
  float NH = max(dot(N, H), 0.0);

  specular = BRDFApprox(specular, s.roughness, NV);

  vec3 diffuseContrib = diffuse / PI;
  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);

  // Cook-Torrance Microfacet Specular BRDF
  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w * (diffuseContrib + specularContrib);

  // Calc lighting
  finalColor += CalcDynamicLighting(s.position, N, V, diffuse, specular, s.roughness);

  float fAmb = 0.5 - N.y * 0.5;
  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;
  finalColor += (ambDiff.rgb * diffuse);

  #if CC_USE_IBL
    vec3 R = normalize(reflect(-V, N));
    vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);
    #if CC_USE_IBL == IBL_RGBE
      vec3 env = unpackRGBE(envmap);
    #else
      vec3 env = SRGBToLinear(envmap.rgb);
    #endif
    finalColor += env * cc_ambientSky.w * specular;
  #endif

  finalColor = finalColor * s.occlusion;

  #if CC_USE_HDR
    s.emissive *= cc_exposure.w;
  #endif
  finalColor += s.emissive;

  return vec4(finalColor, s.albedo.a);
}
